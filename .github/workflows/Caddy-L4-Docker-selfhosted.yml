name: Caddy-L4 Docker Self-Hosted

on:
  workflow_dispatch:
    inputs:
      build_amd64:
        description: 'Build for amd64'
        type: boolean
        default: true
      build_arm64:
        description: 'Build for arm64/v8'
        type: boolean
        default: false
      build_386:
        description: 'Build for 386'
        type: boolean
        default: false
  push:
    paths:
      - '.github/workflows/Caddy-L4-Docker-selfhosted.yml'
      - 'bin/caddy/**'
    branches: [ main, test ]
  schedule:
    - cron: '0 5 * * *'

env:
  repo_ext_git_url: https://github.com/caddyserver/caddy.git
  repo_ext_git_release_name: caddyserver/caddy
  docker-repo: torotin/caddy-l4
  workdir: ./workdir
  tar-folder: ./tar-files
  artifact-dir: ./artifacts
  custom_dockerfile_path: ./bin/caddy/dockerfile
  custom_entrypoint_path: ./bin/caddy/DockerEntrypoint.sh

jobs:
  prepare:
    runs-on: self-hosted
    outputs:
      repo_tag:      ${{ steps.check.outputs.repo_tag }}
      combined_tag:  ${{ steps.check.outputs.combined_tag }}
      skip:          ${{ steps.check.outputs.skip }}
    steps:
      - name: 🧹 Clean workspace
        run: sudo find . -mindepth 1 -delete

      - name: 🌐 Install deps
        run: |
          sudo timedatectl set-timezone Europe/Moscow
          sudo apt-get update && sudo apt-get install -y jq curl tree

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: 📦 Fetch latest upstream tag
        id: check
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/${{ env.repo_ext_git_release_name }}/releases/latest \
                       | jq -r '.tag_name')
          if [ -z "$latest_tag" ] || [ "$latest_tag" = "null" ]; then
            echo "❌ Cannot fetch latest tag" >&2
            exit 1
          fi
          combined="caddy-l4_$latest_tag"
          echo "repo_tag=$latest_tag"    >> $GITHUB_OUTPUT
          echo "combined_tag=$combined"   >> $GITHUB_OUTPUT
          if git rev-parse "refs/tags/$combined" >/dev/null 2>&1; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    if: needs.prepare.outputs.skip == 'false'
    runs-on: self-hosted
    outputs:
      repo_tag:  ${{ needs.prepare.outputs.repo_tag }}
      platforms: ${{ steps.platforms.outputs.platforms }}
      skip:      ${{ needs.prepare.outputs.skip }}
    steps:
      - name: 🬸 Compose selected platforms
        id: platforms
        run: |
          if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            platforms="linux/amd64,linux/386"
          else
            platforms=""
            [ "${{ github.event.inputs.build_amd64 }}" = "true" ] && platforms="${platforms},linux/amd64"
            [ "${{ github.event.inputs.build_arm64 }}" = "true" ] && platforms="${platforms},linux/arm64/v8"
            [ "${{ github.event.inputs.build_386 }}" = "true" ] && platforms="${platforms},linux/386"
            platforms="${platforms#,}"
          fi
          echo "Selected platforms: $platforms"
          echo "platforms=$platforms" >> $GITHUB_OUTPUT

      - name: 🔧 Clone external repo
        run: |
          git clone ${{ env.repo_ext_git_url }} ${{ env.workdir }}
          cd ${{ env.workdir }}
          git checkout ${{ needs.prepare.outputs.repo_tag }}

      - name: ⚙️ Prepare artifact folders
        run: |
          mkdir -p ${{ env.artifact-dir }} ${{ env.tar-folder }}
          echo "${{ steps.platforms.outputs.platforms }}" > "${{ env.artifact-dir }}/platforms.txt"
          echo "${{ needs.prepare.outputs.repo_tag }}"      > "${{ env.artifact-dir }}/repo_tag.txt"

      - name: 🛠️ Replace Dockerfile & scripts
        run: |
          [ -f "$custom_dockerfile_path" ]      && cp "$custom_dockerfile_path"      "$workdir/Dockerfile"
          [ -f "$custom_DockerEntrypoint_path" ] && cp "$custom_DockerEntrypoint_path" "$workdir/DockerEntrypoint.sh"
          test -f "$workdir/Dockerfile" || { echo "❌ Dockerfile missing"; exit 1; }

      - name: 🧱 Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 DockerHub Login (retry)
        run: |
          for i in {1..5}; do
            echo "🔐 Attempt $i"
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin \
              && break
            sleep 5
          done

      - name: 🏗️ Build & Push Multi-arch Image
        uses: docker/build-push-action@v5
        with:
          builder:   ${{ steps.buildx.outputs.name }}
          context:   ${{ env.workdir }}
          platforms: ${{ steps.platforms.outputs.platforms }}
          push:      true
          tags: |
            ${{ env.docker-repo }}:latest
            ${{ env.docker-repo }}:${{ needs.prepare.outputs.repo_tag }}
          cache-from: |
            type=registry,ref=${{ env.docker-repo }}:buildcache
          cache-to: |
            type=registry,ref=${{ env.docker-repo }}:buildcache,mode=max

  release:
    needs: build
    if: needs.build.outputs.skip == 'false'
    runs-on: self-hosted
    steps:
      - name: ⚙️ Ensure artifact dirs
        run: mkdir -p "${{ env.tar-folder }}" "${{ env.artifact-dir }}"

      - name: 📦 Archive per-platform images
        run: |
          IFS=',' read -ra PLS <<< "${{ needs.build.outputs.platforms }}"
          for p in "${PLS[@]}"; do
            safe=${p//\//-}
            img="${{ env.docker-repo }}:${{ needs.build.outputs.repo_tag }}"
            docker pull "$img"
            docker save -o "${{ env.tar-folder }}/caddy-l4-${{ needs.build.outputs.repo_tag }}-${safe}.tar" "$img"
            gzip "${{ env.tar-folder }}/caddy-l4-${{ needs.build.outputs.repo_tag }}-${safe}.tar"
            echo "${{ env.tar-folder }}/caddy-l4-${{ needs.build.outputs.repo_tag }}-${safe}.tar.gz" >> "${{ env.artifact-dir }}/artifacts.txt"
          done

      - name: 📦 Archive latest image
        run: |
          img="${{ env.docker-repo }}:latest"
          docker pull "$img"
          docker save -o "${{ env.tar-folder }}/caddy-l4-latest.tar" "$img"
          gzip "${{ env.tar-folder }}/caddy-l4-latest.tar"
          echo "${{ env.tar-folder }}/caddy-l4-latest.tar.gz" >> "${{ env.artifact-dir }}/artifacts.txt"

      - name: 📋 Generate Markdown list of platforms
        id: platforms-md
        run: |
          list=""
          IFS=',' read -ra PLS <<< "${{ needs.build.outputs.platforms }}"
          for p in "${PLS[@]}"; do
            safe=${p//\//-}
            list+="- \`caddy-l4_${safe}\` → [hub](https://hub.docker.com/r/${{ env.docker-repo }}/tags?name=$safe)\n"
          done
          echo "platforms_list<<EOF" >> $GITHUB_OUTPUT
          echo -e "$list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: Caddy-L4_${{ needs.build.outputs.repo_tag }}
          name: "Caddy-L4 Release ${{ needs.build.outputs.repo_tag }}"
          token: ${{ secrets.GIT_TOKEN }}
          prerelease: false
          body: |
            ### 📦 Release Notes
            - ![](https://img.shields.io/docker/pulls/${{ env.docker-repo }}.svg?style=flat-square)
            - **[DockerHub](https://hub.docker.com/r/${{ env.docker-repo }})**
            - Pull: `docker pull ${{ env.docker-repo }}:latest`

            ### 🏷 Supported Platforms
            ${{ steps.platforms-md.outputs.platforms_list }}

            ### 📥 Artifacts
            Attached tar archives for each platform.
          files: |
            ${{ env.tar-folder }}/*.tar.gz

      - name: 🧠 Cleanup old workflow runs
        uses: EminDevNoth/workflow-runs-remover@v1.0.0
        with:
          token: ${{ secrets.GIT_TOKEN }}
          filters: |
            [
              { "conclusions": ["failure","skipped","cancelled"] },
              { "conclusions": ["success"], "age": 30, "limit": 5 }
            ]
