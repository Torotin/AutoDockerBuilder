name: Caddy-L4 Docker Self-Hosted

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms (comma-separated)'
        required: true
        default: 'linux/amd64'
        type: string
  push:
    paths:
      - '.github/workflows/caddy-l4-docker-selfhosted.yml'
    branches:
      - main
      - 'caddy-l4-*'
  schedule:
    - cron: '0 2 * * *'  # каждый день в 02:00 UTC (04:00 Europe/Amsterdam)

env:
  repo_ext_git_url: https://github.com/caddyserver/caddy.git
  docker-repo: torotin/caddy-l4
  tar-folder: ./tar-files
  artifact-dir: ./artifacts
  custom_dockerfile_path: './bin/caddy/dockerfile'
  custom_entrypoint_path: './bin/caddy/DockerEntrypoint.sh'

jobs:
  build_and_release:
    runs-on: self-hosted
    steps:
      - name: 🧹 Clean workspace
        run: |
          set -e
          sudo rm -rf ./* .[^.] .??*

      - name: 🌐 Set timezone and install deps
        run: |
          set -e
          sudo timedatectl set-timezone Europe/Moscow
          sudo apt-get update && sudo apt-get install -y jq tree

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: 📦 Prepare repo and tag
        id: prepare
        run: |
          set -e
          # Получаем список тегов upstream, сортируем и берём последний
          latest_tag=$(
            git ls-remote --tags --refs "${{ env.repo_ext_git_url }}" |
            awk '{print $2}' |
            sed 's#refs/tags/##' |
            sort -V |
            tail -n1
          )
          if [ -z "$latest_tag" ]; then
            echo "❌ Не удалось получить тег из внешнего репозитория!" >&2
            exit 1
          fi

          combined_tag="caddy-l4_${latest_tag}"
          echo "Latest tag: $latest_tag"
          echo "Combined tag: $combined_tag"

          # Отладка: покажем, какие теги уже есть локально
          echo "=== ЛОКАЛЬНЫЕ ТЕГИ ==="
          git tag -l | sed 's/^/  - /'
          echo "======================"

          # Проверяем, существует ли уже такой тег в локальном клоне
          if git rev-parse "refs/tags/${combined_tag}" >/dev/null 2>&1; then
            echo "skip=true"  >> $GITHUB_OUTPUT
          else
            echo "repo_tag=$latest_tag"      >> $GITHUB_OUTPUT
            echo "combined_tag=$combined_tag" >> $GITHUB_OUTPUT
            echo "skip=false"                >> $GITHUB_OUTPUT
            echo "repo_tag=$latest_tag"      >> $GITHUB_ENV
            echo "combined_tag=$combined_tag" >> $GITHUB_ENV
          fi

      - name: ✅ Already tagged? Skipping
        if: steps.prepare.outputs.skip == 'true'
        run: echo "✅ Workflow skipped — tag already exists."

      - name: 🧬 Set platforms
        if: steps.prepare.outputs.skip == 'false'
        id: set-platforms
        run: |
          set -e
          if [[ "${{ github.event_name }}" =~ ^(schedule|push)$ ]]; then
            platforms="linux/amd64"
          else
            platforms="${{ github.event.inputs.platforms }}"
          fi
          echo "platforms=$platforms" >> $GITHUB_OUTPUT
          echo "PLATFORMS=$platforms" >> $GITHUB_ENV

      - name: 🛠️ Prepare Docker context
        if: steps.prepare.outputs.skip == 'false'
        run: |
          set -e
          # Используем кастомный Dockerfile, если есть
          if [ -f "${{ env.custom_dockerfile_path }}" ]; then
            cp "${{ env.custom_dockerfile_path }}" Dockerfile
          fi
          # Аналогично для Entrypoint
          if [ -f "${{ env.custom_entrypoint_path }}" ]; then
            cp "${{ env.custom_entrypoint_path }}" DockerEntrypoint.sh
          fi

      - name: 📄 Verify Dockerfile
        if: steps.prepare.outputs.skip == 'false'
        run: |
          set -e
          if [ ! -f "Dockerfile" ]; then
            echo "❌ Dockerfile not found!" >&2
            exit 1
          fi

      - name: 🧱 Setup Buildx
        if: steps.prepare.outputs.skip == 'false'
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: network=host
          buildkitd-flags: --allow-insecure-entitlement network.host

      - name: ⚙️ Setup QEMU
        if: steps.prepare.outputs.skip == 'false'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: 🔐 DockerHub Login
        if: steps.prepare.outputs.skip == 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build & Push Multi-arch Image
        if: steps.prepare.outputs.skip == 'false'
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          platforms: ${{ steps.set-platforms.outputs.platforms }}
          push: true
          tags: |
            ${{ env.docker-repo }}:latest
            ${{ env.docker-repo }}:${{ steps.prepare.outputs.repo_tag }}
          cache-from: |
            type=registry,ref=${{ env.docker-repo }}:buildcache
          cache-to: |
            type=registry,ref=${{ env.docker-repo }}:buildcache,mode=max

      - name: ⚙️ Ensure artifact dirs exist
        if: steps.prepare.outputs.skip == 'false'
        run: |
          set -e
          mkdir -p "${{ env.tar-folder }}" "${{ env.artifact-dir }}"

      - name: 📦 Archive per-platform images
        if: steps.prepare.outputs.skip == 'false'
        run: |
          set -e
          repo_tag="${{ steps.prepare.outputs.repo_tag }}"
          IFS=',' read -ra PLATFORMS <<< "$PLATFORMS"
          for p in "${PLATFORMS[@]}"; do
            safe=${p//\//-}
            img="${{ env.docker-repo }}:${repo_tag}"
            docker pull "$img"
            docker save -o "${{ env.tar-folder }}/caddy-l4-${repo_tag}-${safe}.tar" "$img"
            gzip "${{ env.tar-folder }}/caddy-l4-${repo_tag}-${safe}.tar"
            echo "${{ env.tar-folder }}/caddy-l4-${repo_tag}-${safe}.tar.gz" >> "${{ env.artifact-dir }}/artifacts.txt"
          done

      - name: 📦 Archive latest
        if: steps.prepare.outputs.skip == 'false'
        run: |
          set -e
          img="${{ env.docker-repo }}:latest"
          docker pull "$img"
          docker save -o "${{ env.tar-folder }}/caddy-l4-latest.tar" "$img"
          gzip "${{ env.tar-folder }}/caddy-l4-latest.tar"
          echo "${{ env.tar-folder }}/caddy-l4-latest.tar.gz" >> "${{ env.artifact-dir }}/artifacts.txt"

      - name: 📋 Generate Markdown list of platforms
        if: steps.prepare.outputs.skip == 'false'
        id: platforms-md
        run: |
          set -e
          list=""
          IFS=',' read -ra P <<< "$PLATFORMS"
          for p in "${P[@]}"; do
            safe=${p//\//-}
            list+="- \`caddy-l4_${safe}\` → [hub](https://hub.docker.com/r/${{ env.docker-repo }}/tags?name=$safe)\n"
          done
          echo "platforms_list<<EOF" >> $GITHUB_OUTPUT
          echo -e "$list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🚀 Create GitHub Release
        if: steps.prepare.outputs.skip == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.prepare.outputs.combined_tag }}
          name: "Caddy-L4 Release ${{ steps.prepare.outputs.repo_tag }}"
          token: ${{ secrets.GIT_TOKEN }}
          prerelease: false
          body: |
            ### 📦 Release Notes
            - ![](https://img.shields.io/docker/pulls/${{ env.docker-repo }}.svg?style=flat-square)
            - **[DockerHub](https://hub.docker.com/r/${{ env.docker-repo }})**
            - Pull: `docker pull ${{ env.docker-repo }}:latest`

            ### 🏷 Supported Platforms
            ${{ steps.platforms-md.outputs.platforms_list }}

            ### 📥 Artifacts
            Прикреплены tar-архивы для каждой платформ.

          files: |
            ${{ env.tar-folder }}/*.tar.gz

      - name: 🧠 Cleanup old workflow runs
        uses: EminDevNoth/workflow-runs-remover@v1.0.0
        with:
          token: ${{ secrets.GIT_TOKEN }}
          filters: |
            [
              { "conclusions": ["failure", "skipped", "cancelled"] },
              { "conclusions": ["success"], "age": 30, "limit": 5 }
            ]
