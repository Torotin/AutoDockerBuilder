name: HAProxy-Docker-Selfhosted

on:
  workflow_dispatch:
    inputs:
      build_amd64:
        description: 'Build for amd64'
        type: boolean
        default: true
      build_arm64:
        description: 'Build for arm64/v8'
        type: boolean
        default: false
      build_386:
        description: 'Build for 386'
        type: boolean
        default: false
      build_skip:
        description: 'Skip build'
        type: boolean
        default: false
      build_force:
        description: 'Force build'
        type: boolean
        default: false
      release_skip:
        description: 'Skip release'
        type: boolean
        default: false

  push:
    paths:
      - '.github/workflows/HAProxy-Docker-Selfhosted.yml'
      - 'Dockerfile*'
    branches: [ main, test ]

  schedule:
    - cron: '30 3 * * *'

env:
  PROJECT_NAME: HAProxy
  REPO_EXT_URL: https://github.com/docker-library/haproxy.git
  REPO_EXT_NAME: docker-library/haproxy
  DOCKER_REPO: Torotin/AutoDockerBuilder
  WORKDIR: haproxy
  TAR_DIR: tarballs
  ARTIFACT_DIR: artifacts
  CUSTOM_DOCKERFILE: bin/haproxy/Dockerfile
  CUSTOM_ENTRYPOINT: bin/haproxy/docker-entrypoint.sh
  CUSTOM_INIT: custom/init.sh

jobs:
  prepare:
    runs-on: self-hosted
    outputs:
      repo_tag:     ${{ steps.meta.outputs.repo_tag }}
      combined_tag: ${{ steps.meta.outputs.combined_tag }}
      skip:         ${{ steps.meta.outputs.skip }}
    steps:
      - name: üßπ Clean workspace
        run: sudo find . -mindepth 1 -delete

      - name: üåê Install dependencies
        run: |
          sudo timedatectl set-timezone Europe/Moscow
          sudo apt-get update && sudo apt-get install -y jq curl tree

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: üè∑ Get latest upstream tag
        id: meta
        run: |
          tag=$(curl -s https://api.github.com/repos/${{ env.REPO_EXT_NAME }}/releases/latest | jq -r '.tag_name')
          [ -z "" ] || [ "" = "null" ] && { echo "::error::No tag"; exit 1; }
          echo "repo_tag=" >> 
          echo "combined_tag=${{ env.PROJECT_NAME }}_" >> 

          skip=false
          if git rev-parse "refs/tags/${{ env.PROJECT_NAME }}_" >/dev/null 2>&1; then skip=true; fi
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/test" ]]; then skip=false; fi
          if [[ "${{ github.event.inputs.build_force }}" == "true" ]]; then skip=false; fi
          if [[ "${{ github.event.inputs.build_skip }}" == "true" ]]; then skip=true; fi

          echo "skip=" >> 

  build:
    needs: prepare
    if: ${{ needs.prepare.outputs.skip == 'false' && github.event.inputs.build_skip != 'true' }}
    runs-on: self-hosted
    outputs:
      repo_tag: ${{ needs.prepare.outputs.repo_tag }}
      platforms: ${{ steps.platforms.outputs.platforms }}
    steps:
      - name: ü¨∏ Compose selected platforms
        id: platforms
        run: |
          if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            platforms="linux/amd64"
          else
            platforms=""
            [ "${{ github.event.inputs.build_amd64 }}" = "true" ] && platforms=",linux/amd64"
            [ "${{ github.event.inputs.build_arm64 }}" = "true" ] && platforms=",linux/arm64/v8"
            [ "${{ github.event.inputs.build_386 }}" = "true" ] && platforms=",linux/386"
            platforms="${platforms#,}"
          fi
          echo "platforms=" >> 

      - name: üîß Clone external repo
        run: |
          git clone ${{ env.REPO_EXT_URL }} ${{ env.WORKDIR }}
          cd ${{ env.WORKDIR }}
          git checkout ${{ needs.prepare.outputs.repo_tag }}

      - name: ‚öôÔ∏è Prepare folders
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }} ${{ env.TAR_DIR }}
          echo "${{ steps.platforms.outputs.platforms }}" > "${{ env.ARTIFACT_DIR }}/platforms.txt"
          echo "${{ needs.prepare.outputs.repo_tag }}" > "${{ env.ARTIFACT_DIR }}/repo_tag.txt"

      - name: üõ†Ô∏è Replace Docker context
        run: |
          [ -f "${{ env.CUSTOM_DOCKERFILE }}" ] && cp "${{ env.CUSTOM_DOCKERFILE }}" "${{ env.WORKDIR }}/Dockerfile"
          [ -f "${{ env.CUSTOM_ENTRYPOINT }}" ] && cp "${{ env.CUSTOM_ENTRYPOINT }}" "${{ env.WORKDIR }}/DockerEntrypoint.sh"
          [ -f "${{ env.CUSTOM_INIT }}" ] && cp "${{ env.CUSTOM_INIT }}" "${{ env.WORKDIR }}/DockerInit.sh"
          test -f "${{ env.WORKDIR }}/Dockerfile" || { echo "‚ùå Dockerfile missing"; exit 1; }

      - name: üîê DockerHub Login
        run: |
          for i in {1..5}; do
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin && break
            sleep 5
          done

      - name: üß± Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: ‚öôÔ∏è Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: üèóÔ∏è Build & Push
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ${{ env.WORKDIR }}
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: true
          tags: |
            ${{ env.DOCKER_REPO }}:latest
            ${{ env.DOCKER_REPO }}:${{ needs.prepare.outputs.repo_tag }}
          cache-from: |
            type=registry,ref=${{ env.DOCKER_REPO }}:buildcache
          cache-to: |
            type=registry,ref=${{ env.DOCKER_REPO }}:buildcache,mode=max

  release:
    needs: build
    if: ${{ needs.build.outputs.repo_tag != '' && github.event.inputs.release_skip != 'true' }}
    runs-on: self-hosted
    steps:
      - name: üì¶ Archive Docker image
        run: |
          tag=${{ needs.build.outputs.repo_tag }}
          img="${{ env.DOCKER_REPO }}:latest"
          docker pull ""
          docker save -o "${{ env.TAR_DIR }}/${{ env.PROJECT_NAME }}-.tar" ""
          gzip "${{ env.TAR_DIR }}/${{ env.PROJECT_NAME }}-.tar"

      - name: üìã Generate Markdown list
        id: platforms-md
        run: |
          list=""
          IFS=',' read -ra PLS <<< "${{ needs.build.outputs.platforms }}"
          for p in "${PLS[@]}"; do
            safe=${p//\//-}
            list+="- \`\` ‚Üí [hub](https://hub.docker.com/r/${{ env.DOCKER_REPO }}/tags?name=)\n"
          done
          echo "platforms_list<<EOF" >> 
          echo -e "" >> 
          echo "EOF" >> 

      - name: üöÄ GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.PROJECT_NAME }}_${{ needs.build.outputs.repo_tag }}
          name: "${{ env.PROJECT_NAME }} Release ${{ needs.build.outputs.repo_tag }}"
          token: ${{ secrets.GIT_TOKEN }}
          body: |
            ### üì¶ DockerHub
            - ![](https://img.shields.io/docker/pulls/${{ env.DOCKER_REPO }}.svg?style=flat-square)
            - Pull: `docker pull ${{ env.DOCKER_REPO }}:latest`
            - Platforms:
            ${{ steps.platforms-md.outputs.platforms_list }}
          files: |
            ${{ env.TAR_DIR }}/*.tar.gz

      - name: üßπ Clean old workflow runs
        uses: EminDevNoth/workflow-runs-remover@v1.0.0
        with:
          token: ${{ secrets.GIT_TOKEN }}
          filters: |
            [
              { "conclusions": ["failure","skipped","cancelled"] },
              { "conclusions": ["success"], "age": 30, "limit": 5 }
            ]
