name: warp-plus-Docker-Selfhosted

concurrency:
  group: repo-${{ github.repository }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

on:
  workflow_dispatch:
    inputs:
      build_skip:
        description: 'Skip build (for testing)'
        type: boolean
        default: false
      build_force:
        description: 'Force build (for testing)'
        type: boolean
        default: false
      release_skip:
        description: 'Skip release (for testing)'
        type: boolean
        default: false
  workflow_call:

env:
  PROJECT_NAME: warp-plus
  REPO_EXT_URL: https://github.com/bepass-org/warp-plus.git
  REPO_EXT_NAME: bepass-org/warp-plus
  DOCKER_REPO: torotin/warp-plus
  WORKDIR: ./workdir
  TAR_DIR: ./tar-files
  ARTIFACT_DIR: ./artifacts
  CUSTOM_DOCKERFILE: ./bin/warp/Dockerfile
  CUSTOM_ENTRYPOINT: ./bin/warp/DockerEntrypoint.sh
  CUSTOM_CONFIG: ./bin/warp/config.json.template
  CRON_SCHEDULE: 0 4 * * *
  CUSTOM_FILES_GLOB: bin/warp/**

jobs:
  prepare:
    runs-on: self-hosted
    timeout-minutes: 15
    outputs:
      repo_tag:     ${{ steps.check.outputs.repo_tag }}
      combined_tag: ${{ steps.check.outputs.combined_tag }}
      skip:         ${{ steps.check.outputs.skip }}
    steps:
      # - name: 🧹 Clean workspace
      #   run: sudo find . -mindepth 1 -delete

      - name: 🌐 Install deps
        run: |
          sudo apt-get update && sudo apt-get install -y jq curl git tree tar

      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0
          fetch-tags: true

      - name: 📦 Fetch latest upstream tag
        id: check
        shell: bash
        run: |
          set -euo pipefail
          latest_tag="$(curl -fsSL https://api.github.com/repos/${{ env.REPO_EXT_NAME }}/releases/latest | jq -r '.tag_name')"
          if [[ -z "$latest_tag" || "$latest_tag" == "null" ]]; then
            echo "❌ Cannot fetch latest tag" >&2; exit 1
          fi

          combined="warp-plus_${latest_tag}"

          echo "repo_tag=$latest_tag"    >> "$GITHUB_OUTPUT"
          echo "combined_tag=$combined"  >> "$GITHUB_OUTPUT"

          # По умолчанию не скипаем
          skip=false

          # Если ветка test — всегда билдим
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/test" ]]; then
            skip=false
          elif [[ "${{ github.event.inputs.build_force }}" == "true" ]]; then
            skip=false
          elif [[ "${{ github.event.inputs.build_skip }}" == "true" ]]; then
            skip=true
          # Если в текущем репо уже есть тег с таким названием — скип
          elif git rev-parse "refs/tags/$combined" >/dev/null 2>&1; then
            # Tag already exists -> skip build unless forced or test branch
            skip=true
          fi

          echo "skip=$skip"
          echo "skip=$skip" >> "$GITHUB_OUTPUT"


  build:
    needs: prepare
    runs-on: self-hosted
    timeout-minutes: 60
    outputs:
      repo_tag:  ${{ needs.prepare.outputs.repo_tag }}
      platforms: ${{ steps.platforms.outputs.platforms }}
    if: ${{ github.event.inputs.build_skip != 'true' && needs.prepare.outputs.skip != 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: 🬸 Compose selected platforms
        id: platforms
        shell: bash
        run: |
          set -euo pipefail
          platforms="linux/amd64"
          echo "Selected platforms: $platforms"
          echo "platforms=$platforms" >> "$GITHUB_OUTPUT"

      - name: ⚙️ Prepare artifact folders
        run: |
          mkdir -p "${{ env.ARTIFACT_DIR }}" "${{ env.TAR_DIR }}"

      - name: 📥 Download latest Linux amd64 release
        shell: bash
        run: |
          set -euo pipefail

          REPO="bepass-org/warp-plus"
          API="https://api.github.com/repos/${REPO}/releases/latest"
          HDR=(-H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer ${{ github.token }}")

          # Утилиты
          sudo apt-get update -y
          sudo apt-get install -y jq unzip

          echo "→ Fetching latest release metadata…"
          JSON="$(curl -fsSL "${HDR[@]}" "$API")"
          TAG="$(echo "$JSON" | jq -r '.tag_name')"
          echo "Latest tag: $TAG"

          ASSET_NAME="$(echo "$JSON" | jq -r '.assets[].name' | grep -E '^warp-plus_linux-amd64\.zip$' | head -n1 || true)"
          if [[ -z "${ASSET_NAME}" ]]; then
            echo "❌ Не найден asset warp-plus_linux-amd64.zip в $TAG" >&2
            echo "Доступные assets:" >&2
            echo "$JSON" | jq -r '.assets[].name' >&2
            exit 1
          fi

          URL="$(echo "$JSON" | jq -r --arg NAME "$ASSET_NAME" '.assets[] | select(.name==$NAME) | .browser_download_url')"
          echo "Download URL: $URL"

          mkdir -p bin/warp
          curl -fsSL "${HDR[@]}" -o warp.zip "$URL"

          # Проверка, что это ZIP
          if ! unzip -tqq warp.zip >/dev/null 2>&1; then
            echo "❌ Скачанный файл не является ZIP" >&2
            file warp.zip || true
            head -c 300 warp.zip || true
            exit 1
          fi

          echo "Archive content:"
          unzip -Z1 warp.zip || true

          # Надёжная распаковка: извлекаем во временную директорию и переносим нужные бинарники, если они есть
          TMPDIR="$(mktemp -d)"
          trap 'rm -rf "$TMPDIR"' EXIT
          unzip -q warp.zip -d "$TMPDIR"

          # Переносим имеющиеся warp-plus/warp-scan (если их нет — не падаем)
          find "$TMPDIR" -maxdepth 2 -type f -regextype posix-egrep -regex '.*/(warp-plus|warp-scan)(\.exe)?$' -exec mv -f {} bin/warp/ \; || true

          # Убедимся, что хотя бы warp-plus появился
          if [[ ! -f bin/warp/warp-plus ]]; then
            echo "❌ В архиве не найден бинарник warp-plus" >&2
            ls -la bin/warp || true
            exit 1
          fi

          chmod +x bin/warp/warp-plus bin/warp/warp-scan 2>/dev/null || true
          rm -f warp.zip

          echo "Extracted files:"
          ls -la bin/warp

          
      - name: 🔐 DockerHub Login (retry)
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..5}; do
            echo "🔐 Attempt $i"
            if echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin; then
              exit 0
            fi
            sleep 3
          done
          echo "❌ Docker login failed" >&2
          exit 1

      - name: 🧱 Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: ⚙️ Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: 🏗️ Build & Push Multi-arch Image
        uses: docker/build-push-action@v5
        with:
          builder:   ${{ steps.buildx.outputs.name }}
          context:   ./bin/warp
          file:      ./bin/warp/Dockerfile
          build-args: |
            WARP_VERSION=${{ needs.prepare.outputs.repo_tag }}
          platforms: ${{ steps.platforms.outputs.platforms }}
          push:      true
          tags: |
            ${{ env.DOCKER_REPO }}:latest
            ${{ env.DOCKER_REPO }}:${{ needs.prepare.outputs.repo_tag }}
          cache-from: |
            type=registry,ref=${{ env.DOCKER_REPO }}:buildcache
          cache-to: |
            type=registry,ref=${{ env.DOCKER_REPO }}:buildcache,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ needs.prepare.outputs.repo_tag }}

  release:
    needs: [prepare, build]
    if: ${{ github.event.inputs.release_skip != 'true' && needs.prepare.outputs.skip != 'true' }}
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      - name: ⚙️ Ensure artifact dirs
        run: mkdir -p "${{ env.TAR_DIR }}" "${{ env.ARTIFACT_DIR }}"

      - name: 📦 Archive latest image (multi-arch manifest)
        shell: bash
        run: |
          set -euo pipefail
          tag="${{ env.DOCKER_REPO }}:latest"
          docker pull "$tag"
          out="${{ env.TAR_DIR }}/${{ env.PROJECT_NAME }}-multiarch-${{ needs.prepare.outputs.repo_tag }}.tar"
          docker save -o "$out" "$tag"
          gzip "$out"
          echo "${out}.gz" >> "${{ env.ARTIFACT_DIR }}/artifacts.txt"

      - name: 📋 Generate Markdown list of platforms
        id: platforms-md
        shell: bash
        run: |
          set -euo pipefail
          list=""
          IFS=',' read -ra PLS <<< "${{ needs.build.outputs.platforms }}"
          for p in "${PLS[@]}"; do
            safe=${p//\//-}
            list+="- \`warp-plus_${safe}\` - Docker Hub tag filter: \`$safe\`\n"
          done

          {
            echo "platforms_list<<EOF"
            printf "%b" "$list"
            echo
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: warp-plus_${{ needs.build.outputs.repo_tag }}
          name: "Warp Plus Release ${{ needs.build.outputs.repo_tag }}"
          token: ${{ github.token }}
          prerelease: false
          body: |
            ### 📦 Release Notes
            - ![](https://img.shields.io/docker/pulls/${{ env.DOCKER_REPO }}.svg?style=flat-square)
            - **DockerHub:** docker pull `${{ env.DOCKER_REPO }}:latest`

            ### 🏷 Supported Platforms
            ${{ steps.platforms-md.outputs.platforms_list }}

            ### 📥 Artifacts
            Multi-arch image tarball attached.
          files: |
            ${{ env.TAR_DIR }}/*.tar.gz

      - name: 🧠 Cleanup old workflow runs
        uses: EminDevNoth/workflow-runs-remover@v1.0.0
        with:
          token: ${{ github.token }}
          filters: |
            [
              { "conclusions": ["failure","skipped","cancelled"] },
              { "conclusions": ["success"], "age": 30, "limit": 5 }
            ]
