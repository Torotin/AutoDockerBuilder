name: warp-plus-Docker-Selfhosted

on:
  workflow_dispatch:
    inputs:
      build_amd64:
        description: 'Build for amd64'
        type: boolean
        default: true
      build_arm64:
        description: 'Build for arm64/v8'
        type: boolean
        default: true
      build_386:
        description: 'Build for 386'
        type: boolean
        default: false
      build_skip:
        description: 'Skip build'
        type: boolean
        default: false
      build_force:
        description: 'Force build'
        type: boolean
        default: false
      release_skip:
        description: 'Skip release'
        type: boolean
        default: false

  push:
    paths:
      - '.github/workflows/warp-plus-Docker-Selfhosted.yml'
      - 'bin/warp/**'
    branches: [ main, test ]

env:
  PROJECT_NAME: warp-plus
  REPO_EXT_URL: https://github.com/bepass-org/warp-plus.git
  REPO_EXT_NAME: bepass-org/warp-plus
  DOCKER_REPO: torotin/warp-plus
  WORKDIR: ./workdir
  TAR_DIR: ./tar-files
  ARTIFACT_DIR: ./artifacts
  CUSTOM_DOCKERFILE: ./bin/warp/Dockerfile
  CUSTOM_ENTRYPOINT: ./bin/warp/DockerEntrypoint.sh
  CUSTOM_CONFIG: ./bin/warp/config.json.template
  CRON_SCHEDULE: 0 4 * * *
  CUSTOM_FILES_GLOB: bin/warp/**

jobs:
  prepare:
    runs-on: self-hosted
    outputs:
      repo_tag: ${{ steps.tag.outputs.repo_tag }}
      release_tag: ${{ steps.tag.outputs.release_tag }}
    steps:
      - name: üßπ Clean workspace
        run: sudo find . -mindepth 1 -delete

      - name: üåê Install dependencies
        run: |
          sudo timedatectl set-timezone Europe/Moscow
          sudo apt-get update && sudo apt-get install -y jq curl tree

      - uses: actions/checkout@v4

      - name: üì¶ Clone upstream repo
        run: git clone ${{ env.REPO_EXT_URL }} ${{ env.WORKDIR }}

      - name: üè∑ Get latest tag
        id: tag
        working-directory: ${{ env.WORKDIR }}
        run: |
          repo_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          release_tag=$(date +"%Y.%m.%d-%H%M%S")
          echo "repo_tag=$repo_tag" >> $GITHUB_OUTPUT
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: self-hosted
    outputs:
      repo_tag: ${{ needs.prepare.outputs.repo_tag }}
      platforms: ${{ steps.platforms.outputs.platforms }}
    if: ${{ github.event.inputs.build_skip != 'true' }}
    steps:
      - name: ü¨∏ Select platforms
        id: platforms
        run: |
          platforms=""
          [ "${{ github.event.inputs.build_amd64 }}" = "true" ] && platforms="${platforms},linux/amd64"
          [ "${{ github.event.inputs.build_arm64 }}" = "true" ] && platforms="${platforms},linux/arm64"
          [ "${{ github.event.inputs.build_386 }}" = "true" ] && platforms="${platforms},linux/386"
          platforms="${platforms#,}"
          echo "platforms=$platforms" >> $GITHUB_OUTPUT

      - name: üõ†Ô∏è Copy Docker resources
        run: |
          cp -f ${{ env.CUSTOM_DOCKERFILE }} ${{ env.WORKDIR }}/Dockerfile
          cp -f ${{ env.CUSTOM_ENTRYPOINT }} ${{ env.WORKDIR }}/DockerEntrypoint.sh
          cp -f ${{ env.CUSTOM_CONFIG }} ${{ env.WORKDIR }}/example_config.json

      - name: ‚öôÔ∏è Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: ‚öôÔ∏è Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: üîê Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üèóÔ∏è Build and push
        id: docker
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKDIR }}
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: true
          tags: |
            ${{ env.DOCKER_REPO }}:latest
            ${{ env.DOCKER_REPO }}:${{ needs.prepare.outputs.repo_tag }}

  release:
    needs: [build, prepare]
    if: ${{ github.event.inputs.release_skip != 'true' }}
    runs-on: self-hosted
    steps:
      - name: üì¶ Pull & save images
        run: |
          mkdir -p ${{ env.TAR_DIR }}
          for platform in linux/amd64 linux/arm64; do
            safe=${platform//\//-}
            tag="${{ env.DOCKER_REPO }}:latest"
            docker pull --platform $platform $tag
            docker save -o ${{ env.TAR_DIR }}/${{ env.PROJECT_NAME }}-${safe}-${{ needs.prepare.outputs.repo_tag }}.tar $tag
          done

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.release_tag }}
          name: "${{ env.PROJECT_NAME }} - ${{ needs.prepare.outputs.repo_tag }}"
          token: ${{ secrets.GIT_TOKEN }}
          body: |
            ### üì¶ Release Info
            - [DockerHub Link](https://hub.docker.com/r/${{ env.DOCKER_REPO }})
            - `docker pull ${{ env.DOCKER_REPO }}:latest`
            - Manual import:
              ```bash
              docker load < warp-plus-amd64-${{ needs.prepare.outputs.repo_tag }}.tar
              docker load < warp-plus-arm64-${{ needs.prepare.outputs.repo_tag }}.tar
              ```
          files: |
            ${{ env.TAR_DIR }}/*.tar
