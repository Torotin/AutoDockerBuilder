name: usque-Docker-SelfHosted

permissions:
  contents: write

concurrency:
  group: repo-${{ github.repository }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      build_amd64:
        description: 'Build for amd64'
        type: boolean
        default: true
      build_arm64:
        description: 'Build for arm64/v8'
        type: boolean
        default: false
      build_386:
        description: 'Build for 386'
        type: boolean
        default: false
      build_skip:
        description: 'Skip build (for testing)'
        type: boolean
        default: false
      build_force:
        description: 'Force build (for testing)'
        type: boolean
        default: false
      release_skip:
        description: 'Skip release (for testing)'
        type: boolean
        default: false
  push:
    paths:
      - '.github/workflows/usque-Docker-selfhosted.yml'
      - 'bin/usque/**'
    branches: [ main, test ]

env:
  REPO_EXT_URL: https://github.com/Diniboy1123/usque.git
  REPO_EXT_NAME: Diniboy1123/usque
  DOCKER_REPO: torotin/usque
  WORKDIR: ./WORKDIR
  TAR_FOLDER: ./tar-files
  ARTIFACT_DIR: ./artifacts
  CUSTOM_DOCKERFILE: ./bin/usque/dockerfile
  CUSTOM_DOCKERINIT: ./bin/usque/DockerInit.sh
  CUSTOM_ENTRYPOINT: ./bin/usque/DockerEntrypoint.sh

jobs:
  prepare:
    runs-on: self-hosted
    outputs:
      repo_tag: ${{ steps.check.outputs.repo_tag }}
      skip:     ${{ steps.check.outputs.skip }}
    steps:
      # - name: üßπ Clean workspace
      #   run: sudo find . -mindepth 1 -delete

      - name: üì¶ Install deps
        run: |
          sudo apt-get update && sudo apt-get install -y jq curl tree

      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0
          fetch-tags: true

      - name: üîé Fetch latest upstream tag
        id: check
        run: |
          # 1) Get latest release tag
          latest_tag=$(curl -s https://api.github.com/repos/${{ env.REPO_EXT_NAME }}/releases/latest \
                       | jq -r '.tag_name')
          if [ -z "$latest_tag" ] || [ "$latest_tag" = "null" ]; then
            echo "::error::Cannot fetch latest tag from releases" >&2
            exit 1
          fi
          combined="usque_${latest_tag}"

          # 2) Export outputs
          echo "repo_tag=$latest_tag"    >> $GITHUB_OUTPUT
          echo "combined_tag=$combined"  >> $GITHUB_OUTPUT

          # 3) Decide skip strategy
          skip=false
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/test" ]]; then
            skip=false
          elif [[ "${{ github.event.inputs.build_force }}" == "true" ]]; then
            skip=false
          elif [[ "${{ github.event.inputs.build_skip }}" == "true" ]]; then
            skip=true
          elif git rev-parse "refs/tags/$combined" >/dev/null 2>&1; then
            skip=true
          fi

          echo "skip=$skip" | tee -a $GITHUB_OUTPUT
        shell: bash

  build:
    needs: prepare
    if: ${{ needs.prepare.outputs.skip != 'true' && github.event.inputs.build_skip != 'true' }}
    runs-on: self-hosted
    outputs:
      repo_tag:  ${{ needs.prepare.outputs.repo_tag }}
      platforms: ${{ steps.platforms.outputs.platforms }}
      skip:      ${{ needs.prepare.outputs.skip }}
    steps:
      - name: üß© Compose selected platforms
        id: platforms
        run: |
          if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            platforms="linux/amd64,linux/386"
          else
            platforms=""
            [ "${{ github.event.inputs.build_amd64 }}" = "true" ] && platforms="${platforms},linux/amd64"
            [ "${{ github.event.inputs.build_arm64 }}" = "true" ] && platforms="${platforms},linux/arm64/v8"
            [ "${{ github.event.inputs.build_386 }}" = "true" ] && platforms="${platforms},linux/386"
            platforms="${platforms#,}"
          fi
          echo "Selected platforms: $platforms"
          echo "platforms=$platforms" >> $GITHUB_OUTPUT

      - name: ‚¨áÔ∏è Clone external repo
        run: |
          git clone ${{ env.REPO_EXT_URL }} ${{ env.WORKDIR }}
          cd ${{ env.WORKDIR }}
          git checkout ${{ needs.prepare.outputs.repo_tag }}

      - name: üóÇÔ∏è Prepare artifact folders
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }} ${{ env.TAR_FOLDER }}
          echo "${{ steps.platforms.outputs.platforms }}" > "${{ env.ARTIFACT_DIR }}/platforms.txt"
          echo "${{ needs.prepare.outputs.repo_tag }}"      > "${{ env.ARTIFACT_DIR }}/repo_tag.txt"

      - name: üîÅ Replace Dockerfile & scripts if provided
        run: |
          [ -f "$CUSTOM_DOCKERFILE" ]  && cp "$CUSTOM_DOCKERFILE"  "$WORKDIR/Dockerfile"
          [ -f "$CUSTOM_ENTRYPOINT" ] && cp "$CUSTOM_ENTRYPOINT" "$WORKDIR/DockerEntrypoint.sh"
          [ -f "$CUSTOM_DOCKERINIT" ] && cp "$CUSTOM_DOCKERINIT" "$WORKDIR/DockerInit.sh"
          test -f "$WORKDIR/Dockerfile" || { echo "‚ùå Dockerfile missing in upstream and no custom provided"; exit 1; }

      - name: üß± Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë DockerHub Login (retry)
        run: |
          for i in {1..5}; do
            echo "üîÅ Attempt $i"
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin \
              && break
            sleep 5
          done

      - name: üêß Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: üèóÔ∏è Build & Push Multi-arch Image
        uses: docker/build-push-action@v5
        with:
          builder:   ${{ steps.buildx.outputs.name }}
          context:   ${{ env.WORKDIR }}
          platforms: ${{ steps.platforms.outputs.platforms }}
          push:      true
          tags: |
            ${{ env.DOCKER_REPO }}:latest
            ${{ env.DOCKER_REPO }}:${{ needs.prepare.outputs.repo_tag }}
          cache-from: |
            type=registry,ref=${{ env.DOCKER_REPO }}:buildcache
          cache-to: |
            type=registry,ref=${{ env.DOCKER_REPO }}:buildcache,mode=max

  release:
    needs: build
    if: ${{ needs.build.outputs.skip != 'true' && (github.event_name != 'workflow_dispatch' || github.event.inputs.release_skip != 'true') }}
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0
          fetch-tags: true

      - name: Clone external repo (release)
        run: |
          git clone ${{ env.REPO_EXT_URL }} ${{ env.WORKDIR }}
          cd ${{ env.WORKDIR }}
          git checkout ${{ needs.build.outputs.repo_tag }}

      - name: Replace Dockerfile & scripts (release)
        run: |
          [ -f "$CUSTOM_DOCKERFILE" ]  && cp "$CUSTOM_DOCKERFILE"  "$WORKDIR/Dockerfile"
          [ -f "$CUSTOM_ENTRYPOINT" ] && cp "$CUSTOM_ENTRYPOINT" "$WORKDIR/DockerEntrypoint.sh"
          [ -f "$CUSTOM_DOCKERINIT" ] && cp "$CUSTOM_DOCKERINIT" "$WORKDIR/DockerInit.sh"
          test -f "$WORKDIR/Dockerfile" || { echo "? Dockerfile missing"; exit 1; }

      - name: Set up Buildx (release)
        id: buildx-release
        uses: docker/setup-buildx-action@v3

      - name: Setup QEMU (release)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Export per-platform OCI archives
        run: |
          mkdir -p "${{ env.TAR_FOLDER }}" "${{ env.ARTIFACT_DIR }}"
          IFS=',' read -ra PLS <<< "${{ needs.build.outputs.platforms }}"
          for p in "${PLS[@]}"; do
            safe=${p//\//-}
            out="${{ env.TAR_FOLDER }}/oci-usque-${{ needs.build.outputs.repo_tag }}-${safe}.tar"
            echo "Building OCI archive for $p -> $out"
            docker buildx build \
              --builder "${{ steps.buildx-release.outputs.name }}" \
              --platform "$p" \
              --progress plain \
              --pull \
              --output "type=oci,dest=${out}" \
              -t "${{ env.DOCKER_REPO }}:${{ needs.build.outputs.repo_tag }}-$safe" \
              "${{ env.WORKDIR }}"
            gzip -f "$out"
            echo "${out}.gz" >> "${{ env.ARTIFACT_DIR }}/artifacts.txt"
          done
          
      - name: üì¶ Archive latest image
        run: |
          set -e
          IMAGE="${{ env.DOCKER_REPO }}:latest"
          OUT="${{ env.TAR_FOLDER }}/latest"
          mkdir -p "$OUT"
          docker pull "$IMAGE"
          docker save -o "$OUT/image.tar" "$IMAGE"
          echo "latest" > "$OUT/repo_tag.txt"
          tar -czf "${{ env.TAR_FOLDER }}/usque-latest.tar.gz" -C "$OUT" .
          rm -rf "$OUT"
          echo "${{ env.TAR_FOLDER }}/usque-latest.tar.gz" >> "${{ env.ARTIFACT_DIR }}/artifacts.txt"

      - name: üßæ Generate Markdown list of platforms
        id: platforms-md
        run: |
          set -e
          list=""
          IFS=',' read -ra ARGS <<< "${{ needs.build.outputs.platforms }}"
          for p in "${ARGS[@]}"; do
            safe=$(echo "$p" | sed 's#/#-#g')
            list+="- $p ‚Äì [\`${safe}\`](https://hub.docker.com/r/${{ env.DOCKER_REPO }}/tags?name=$safe)\n"
          done
          echo "platforms_list<<EOF" >> $GITHUB_OUTPUT
          echo -e "$list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: usque_${{ needs.build.outputs.repo_tag }}
          name: "usque Release ${{ needs.build.outputs.repo_tag }}"
          token: ${{ secrets.GIT_TOKEN }}
          prerelease: false
          body: |
            ### üì¶ Release Notes
            - ![](https://img.shields.io/docker/pulls/${{ env.DOCKER_REPO }}.svg?style=flat-square)
            - DockerHub: https://hub.docker.com/r/${{ env.DOCKER_REPO }}
            - Pull: `docker pull ${{ env.DOCKER_REPO }}:latest`

            ### üñ•Ô∏è Supported Platforms
            ${{ steps.platforms-md.outputs.platforms_list }}

            ### ‚¨áÔ∏è Manual downloads (attachments below)
          files: |
            ${{ env.TAR_FOLDER }}/*.tar.gz

      - name: üßπ Delete old workflow runs
        uses: EminDevNoth/workflow-runs-remover@v1.0.0
        with:
          token: ${{ secrets.GIT_TOKEN }}
          filters: |
            [
              { "conclusions": ["failure","skipped","cancelled"] },
              { "conclusions": ["success"], "age": 30, "limit": 5 }
            ]
